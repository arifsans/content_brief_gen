import 'dart:io';
import 'dart:typed_data';
import 'package:archive/archive.dart';
import 'ai_provider.dart';

/// Word Document Generator for Content Briefs
class WordDocumentGenerator {
  
  /// Generate a Word document for the content brief
  Future<void> generateWordDocument(ContentBrief brief, {String? outputDir, String? timestampedFolder}) async {
    final dir = timestampedFolder != null 
        ? 'results/$timestampedFolder' 
        : (outputDir ?? 'content_briefs');
    final briefDir = Directory(dir);
    if (!await briefDir.exists()) {
      await briefDir.create(recursive: true);
    }

    final safeKeyword = brief.keyword.replaceAll(RegExp(r'[^\w\s-]'), '').trim();
    final filename = '$dir/${safeKeyword.replaceAll(' ', '_')}_brief.docx';
    
    // Create the Word document content
    final wordContent = _createWordDocument(brief);
    
    // Create the DOCX file
    final archive = Archive();
    
    // Add required files for DOCX format
    _addDocxFiles(archive, wordContent);
    
    // Encode and save
    final encoder = ZipEncoder();
    final data = encoder.encode(archive);
    
    await File(filename).writeAsBytes(data!);
    print('ðŸ“„ Word document saved to: $filename');
  }

  /// Generate a Word document for an article
  Future<void> generateArticleWordDocument(
    String article, 
    String keyword, 
    {String? timestampedFolder}
  ) async {
    final dir = timestampedFolder != null 
        ? 'results/$timestampedFolder' 
        : ('article');
    final resultsDir = Directory(dir);
    
    if (!await resultsDir.exists()) {
      await resultsDir.create(recursive: true);
    }

    final safeKeyword = keyword.replaceAll(RegExp(r'[^\w\s-]'), '').trim();
    final filename = '$dir/${safeKeyword.replaceAll(' ', '_')}_article.docx';
    
    // Create the Word document content
    final wordContent = _createArticleWordDocument(article, keyword);
    
    // Create the DOCX file
    final archive = Archive();
    
    // Add required files for DOCX format
    _addDocxFiles(archive, wordContent);
    
    // Encode and save
    final encoder = ZipEncoder();
    final data = encoder.encode(archive);
    
    await File(filename).writeAsBytes(data!);
    print('ðŸ’¾ Word document saved: $filename');
  }

  /// Create the main document content XML
  String _createWordDocument(ContentBrief brief) {
    final content = StringBuffer();
    
    // Document header
    content.write('''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
''');

    // Title
    content.write(_createHeading('SEO CONTENT BRIEF', 1));
    content.write(_createParagraph('Generated on: ${_formatDateTime(brief.generatedAt)}'));
    content.write(_createParagraph(''));

    // Primary Keyword Section
    content.write(_createHeading('PRIMARY KEYWORD', 2));
    content.write(_createParagraph(brief.keyword, bold: true));
    content.write(_createParagraph(''));

    // Topic Section
    content.write(_createHeading('TOPIC', 2));
    content.write(_createParagraph(brief.topic));
    content.write(_createParagraph(''));

    // SEO Title Section
    content.write(_createHeading('SEO TITLE', 2));
    content.write(_createParagraph(brief.title, bold: true));
    content.write(_createParagraph('Characters: ${brief.title.length}', italic: true));
    content.write(_createParagraph(''));

    // Meta Description Section
    content.write(_createHeading('META DESCRIPTION', 2));
    content.write(_createParagraph(brief.metaDescription));
    content.write(_createParagraph('Characters: ${brief.metaDescription.length}', italic: true));
    content.write(_createParagraph(''));

    // Article Structure Section
    content.write(_createHeading('ARTICLE STRUCTURE', 2));
    for (var i = 0; i < brief.articleStructure.length; i++) {
      content.write(_createParagraph('${brief.articleStructure[i]}'));
    }
    content.write(_createParagraph(''));

    // Related Keywords Section
    content.write(_createHeading('RELATED KEYWORDS', 2));
    final keywordChunks = <String>[];
    for (var i = 0; i < brief.relatedKeywords.length; i += 3) {
      final chunk = brief.relatedKeywords.skip(i).take(3).join(' â€¢ ');
      keywordChunks.add(chunk);
    }
    for (final chunk in keywordChunks) {
      content.write(_createParagraph(chunk));
    }
    content.write(_createParagraph(''));

    // Footer
    content.write(_createParagraph('Generated by Enhanced SEO Content Brief Generator', italic: true));
    content.write(_createParagraph('Powered by OpenAI GPT', italic: true));

    // Document footer
    content.write('''
  </w:body>
</w:document>''');

    return content.toString();
  }

  /// Create article document content XML (with Markdown-style formatting)
  String _createArticleWordDocument(String article, String keyword) {
    final content = StringBuffer();
    
    // Document header
    content.write('''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
''');

    // Parse the article and convert to Word format
    final lines = article.split('\n');
    
    for (var line in lines) {
      line = line.trim();
      
      if (line.isEmpty) {
        // Empty line - add paragraph break
        content.write(_createParagraph(''));
        continue;
      }
      
      // Check for Markdown headers
      if (line.startsWith('# ')) {
        // H1 heading
        content.write(_createHeading(line.substring(2).trim(), 1));
      } else if (line.startsWith('## ')) {
        // H2 heading
        content.write(_createHeading(line.substring(3).trim(), 2));
      } else if (line.startsWith('### ')) {
        // H3 heading (treat as H2 in Word for simplicity)
        content.write(_createHeading(line.substring(4).trim(), 2));
      } else if (line.startsWith('**') && line.endsWith('**')) {
        // Bold paragraph
        final text = line.substring(2, line.length - 2);
        content.write(_createParagraph(text, bold: true));
      } else if (line.startsWith('*') && line.endsWith('*') && !line.startsWith('**')) {
        // Italic paragraph
        final text = line.substring(1, line.length - 1);
        content.write(_createParagraph(text, italic: true));
      } else if (line.startsWith('- ') || line.startsWith('* ')) {
        // Bullet point
        content.write(_createBulletPoint(line.substring(2).trim()));
      } else if (RegExp(r'^\d+\.\s').hasMatch(line)) {
        // Numbered list
        final text = line.replaceFirst(RegExp(r'^\d+\.\s'), '');
        content.write(_createNumberedPoint(text));
      } else {
        // Regular paragraph - handle inline formatting
        content.write(_createFormattedParagraph(line));
      }
    }

    // Document footer
    content.write('''
  </w:body>
</w:document>''');

    return content.toString();
  }

  /// Create a formatted paragraph with inline bold/italic
  String _createFormattedParagraph(String text) {
    // Simple inline formatting (this is a basic implementation)
    // For better formatting, consider using a markdown parser
    final buffer = StringBuffer();
    buffer.write('<w:p>');
    
    // Split by bold markers **text**
    final parts = text.split('**');
    for (var i = 0; i < parts.length; i++) {
      if (i % 2 == 0) {
        // Regular text
        if (parts[i].isNotEmpty) {
          buffer.write('<w:r><w:t xml:space="preserve">${_escapeXml(parts[i])}</w:t></w:r>');
        }
      } else {
        // Bold text
        buffer.write('<w:r><w:rPr><w:b/></w:rPr><w:t xml:space="preserve">${_escapeXml(parts[i])}</w:t></w:r>');
      }
    }
    
    buffer.write('</w:p>\n');
    return buffer.toString();
  }

  /// Create a bullet point in Word format
  String _createBulletPoint(String text) {
    return '''
    <w:p>
      <w:pPr>
        <w:numPr>
          <w:ilvl w:val="0"/>
          <w:numId w:val="1"/>
        </w:numPr>
      </w:pPr>
      <w:r>
        <w:t xml:space="preserve">${_escapeXml(text)}</w:t>
      </w:r>
    </w:p>
''';
  }

  /// Create a numbered point in Word format
  String _createNumberedPoint(String text) {
    return '''
    <w:p>
      <w:pPr>
        <w:numPr>
          <w:ilvl w:val="0"/>
          <w:numId w:val="2"/>
        </w:numPr>
      </w:pPr>
      <w:r>
        <w:t xml:space="preserve">${_escapeXml(text)}</w:t>
      </w:r>
    </w:p>
''';
  }

  /// Create a heading in Word format
  String _createHeading(String text, int level) {
    return '''
    <w:p>
      <w:pPr>
        <w:pStyle w:val="Heading$level"/>
      </w:pPr>
      <w:r>
        <w:t xml:space="preserve">${_escapeXml(text)}</w:t>
      </w:r>
    </w:p>
''';
  }

  /// Create a paragraph in Word format
  String _createParagraph(String text, {bool bold = false, bool italic = false}) {
    final buffer = StringBuffer();
    buffer.write('    <w:p>\n      <w:r>');
    
    if (bold || italic) {
      buffer.write('\n        <w:rPr>');
      if (bold) buffer.write('\n          <w:b/>');
      if (italic) buffer.write('\n          <w:i/>');
      buffer.write('\n        </w:rPr>');
    }
    
    buffer.write('\n        <w:t xml:space="preserve">${_escapeXml(text)}</w:t>');
    buffer.write('\n      </w:r>\n    </w:p>\n');
    
    return buffer.toString();
  }

  /// Add required files for DOCX format
  void _addDocxFiles(Archive archive, String documentContent) {
    // Add [Content_Types].xml
    archive.addFile(ArchiveFile(
      '[Content_Types].xml',
      0,
      Uint8List.fromList(_contentTypesXml.codeUnits),
    ));

    // Add _rels/.rels
    archive.addFile(ArchiveFile(
      '_rels/.rels',
      0,
      Uint8List.fromList(_relsXml.codeUnits),
    ));

    // Add word/_rels/document.xml.rels
    archive.addFile(ArchiveFile(
      'word/_rels/document.xml.rels',
      0,
      Uint8List.fromList(_documentRelsXml.codeUnits),
    ));

    // Add word/document.xml (main content)
    archive.addFile(ArchiveFile(
      'word/document.xml',
      0,
      Uint8List.fromList(documentContent.codeUnits),
    ));

    // Add word/styles.xml
    archive.addFile(ArchiveFile(
      'word/styles.xml',
      0,
      Uint8List.fromList(_stylesXml.codeUnits),
    ));

    // Add word/numbering.xml (required for bullet and numbered lists)
    archive.addFile(ArchiveFile(
      'word/numbering.xml',
      0,
      Uint8List.fromList(_numberingXml.codeUnits),
    ));
  }

  /// Escape XML special characters
  String _escapeXml(String text) {
    return text
        .replaceAll('&', '&amp;')
        .replaceAll('<', '&lt;')
        .replaceAll('>', '&gt;')
        .replaceAll('"', '&quot;')
        .replaceAll("'", '&#39;');
  }

  String _formatDateTime(DateTime dateTime) {
    final months = [
      '', 'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
      'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
    ];
    
    final day = dateTime.day.toString().padLeft(2, '0');
    final month = months[dateTime.month];
    final year = dateTime.year.toString();
    final hour = dateTime.hour.toString().padLeft(2, '0');
    final minute = dateTime.minute.toString().padLeft(2, '0');
    
    return '$day-$month-$year $hour:$minute';
  }

  // Required DOCX file contents
  static const String _contentTypesXml = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
  <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
  <Default Extension="xml" ContentType="application/xml"/>
  <Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
  <Override PartName="/word/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml"/>
  <Override PartName="/word/numbering.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml"/>
</Types>''';

  static const String _relsXml = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
</Relationships>''';

  static const String _documentRelsXml = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>
  <Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering" Target="numbering.xml"/>
</Relationships>''';

  static const String _stylesXml = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:styles xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:style w:type="paragraph" w:styleId="Heading1">
    <w:name w:val="heading 1"/>
    <w:pPr>
      <w:spacing w:after="240"/>
    </w:pPr>
    <w:rPr>
      <w:b/>
      <w:sz w:val="32"/>
    </w:rPr>
  </w:style>
  <w:style w:type="paragraph" w:styleId="Heading2">
    <w:name w:val="heading 2"/>
    <w:pPr>
      <w:spacing w:after="240"/>
    </w:pPr>
    <w:rPr>
      <w:b/>
      <w:sz w:val="24"/>
    </w:rPr>
  </w:style>
</w:styles>''';

  static const String _numberingXml = '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:numbering xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:abstractNum w:abstractNumId="0">
    <w:multiLevelType w:val="hybridMultilevel"/>
    <w:lvl w:ilvl="0">
      <w:start w:val="1"/>
      <w:numFmt w:val="bullet"/>
      <w:lvlText w:val="â€¢"/>
      <w:lvlJc w:val="left"/>
      <w:pPr>
        <w:ind w:left="720" w:hanging="360"/>
      </w:pPr>
    </w:lvl>
  </w:abstractNum>
  <w:abstractNum w:abstractNumId="1">
    <w:multiLevelType w:val="hybridMultilevel"/>
    <w:lvl w:ilvl="0">
      <w:start w:val="1"/>
      <w:numFmt w:val="decimal"/>
      <w:lvlText w:val="%1."/>
      <w:lvlJc w:val="left"/>
      <w:pPr>
        <w:ind w:left="720" w:hanging="360"/>
      </w:pPr>
    </w:lvl>
  </w:abstractNum>
  <w:num w:numId="1">
    <w:abstractNumId w:val="0"/>
  </w:num>
  <w:num w:numId="2">
    <w:abstractNumId w:val="1"/>
  </w:num>
</w:numbering>''';
}